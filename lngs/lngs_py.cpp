/*
* Copyright (C) 2015 midnightBITS
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "pch.h"

#include <filesystem.hpp>
#include <argparser.hpp>
#include <strings.hpp>

namespace py {
	void write(FILE* out, const locale::Strings& defs);
	int call(args::parser& parser)
	{
		fs::path inname, outname;
		bool verbose = false;

		parser.set<std::true_type>(verbose, "v", "verbose").help("show more info").opt();
		parser.arg(outname, "o", "out").meta("FILE").help("C++ header file to write; if - is used, result is written to standard output");
		parser.arg(inname, "i", "in").meta("FILE").help("LNGS message file to read");
		parser.parse();

		locale::Strings strings;
		if (!locale::read_strings(inname, strings, verbose))
			return -1;

		if (outname == "-") {
			write(stdout, strings);
			return 0;
		}

		std::unique_ptr<FILE, decltype(&fclose)> outf{ fs::fopen(outname, "w"), fclose };

		if (!outf) {
			fprintf(stderr, "could not open `%s'", outname.string().c_str());
			return -1;
		}

		if (verbose)
			printf("%s\n", outname.string().c_str());

		write(outf.get(), strings);
		return 0;
	}

	void write(FILE* out, const locale::Strings& defs)
	{
		fprintf(out, R"(#!/usr/bin/python
# -*- coding: UTF-8 -*-

# THIS FILE IS AUTOGENERATED

)");
		bool has_singular = false;
		bool has_plural = false;

		for (auto& str : defs.strings) {
			if (!str.plural.empty()) {
				has_plural = true;
				continue;
			}

			has_singular = true;

			auto message = str.value;
			for (auto& c : message)
				if (c == '\n') c = ' ';

			auto help = str.help;
			for (auto& c : help)
				if (c == '\n') c = ' ';

			fprintf(out, "%s = %d # %s", str.key.c_str(), str.id, message.c_str());
			if (!help.empty())
				fprintf(out, " (%s)", help.c_str());
			fprintf(out, "\n");
		}

		if (has_singular && has_plural)
			fprintf(out, "\n");

		for (auto& str : defs.strings) {
			if (str.plural.empty())
				continue;

			auto message = str.value;
			for (auto& c : message)
				if (c == '\n') c = ' ';

			auto plural = str.plural;
			for (auto& c : plural)
				if (c == '\n') c = ' ';

			auto help = str.help;
			for (auto& c : help)
				if (c == '\n') c = ' ';

			fprintf(out, "%s = %d # %s", str.key.c_str(), str.id, message.c_str());
			if (!plural.empty())
				fprintf(out, " | %s", plural.c_str());
			if (!help.empty())
				fprintf(out, " (%s)", help.c_str());
			fprintf(out, "\n");
		}
	}
}
