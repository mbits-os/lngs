// THIS FILE IS AUTOGENERATED
#pragma once

#include <lngs/lngs.hpp>

// clang-format off
namespace {{ns_name}}{{^ns_name}}{{project}}{{/ns_name}} {
{{#with_singular}}
    enum class lng {
{{#singular}}
        {{> enum_string}}
{{/singular}}
    }; // enum class lng

{{/with_singular}}
{{#with_plural}}
    enum class counted {
{{#plural}}
        {{> enum_string}}
{{/plural}}
    }; // enum class counted

{{/with_plural}}
{{^with_plural}}
{{^with_singular}}
    enum class faulty {
        UNDEFINED = 0 // File did not define any strings
    }; // enum class faulty

{{/with_singular}}
{{/with_plural}}
{{#with_resource}}
    struct Resource {
        static const char* data();
        static std::size_t size();
    };

{{/with_resource}}
    using Strings = lngs::{{!

####################################
#  Which implementation of enum handlers?
#  1. if with-plural...

}}{{#with_plural}}{{!

####################################
#  2. and if with-singular: StringsWithPlurals

}}{{#with_singular}}StringsWithPlurals<{{!}}lng, counted{{/with_singular}}{{!

####################################
#  2A. else: StringsWithPlurals

}}{{^with_singular}}PluralOnlyStrings<{{!}}counted{{/with_singular}}{{/with_plural}}{{!

####################################
#  1A. else: StringsWithPlurals (for lng and faulty)

}}{{^with_plural}}SingularStrings<{{!
	}}{{#with_singular}}lng{{/with_singular}}{{!
	}}{{^with_singular}}faulty{{/with_singular}}{{!
}}{{/with_plural}}, lngs::VersionedFile<{{serial}}{{!

####################################
# Do we need a builtin?

}}{{#with_resource}}{{!
	}},
        lngs::storage::FileWithBuiltin<Resource>{{!
}}{{/with_resource}}>>;
} // namespace {{ns_name}}{{^ns_name}}{{project}}{{/ns_name}}
// clang-format on
