// THIS FILE IS AUTOGENERATED
#pragma once

#include <cstddef>
#include <string_view>
#include <optional>

// clang-format off
namespace lngs::languages {
    struct en {
        static const char* data() noexcept;
        static std::size_t size() noexcept;
        static std::string_view view() noexcept { return {data(), size()}; }
    };

    struct fr {
        static const char* data() noexcept;
        static std::size_t size() noexcept;
        static std::string_view view() noexcept { return {data(), size()}; }
    };

    struct pl {
        static const char* data() noexcept;
        static std::size_t size() noexcept;
        static std::string_view view() noexcept { return {data(), size()}; }
    };

    inline std::optional<std::string_view> get_resource(std::string_view key) noexcept {
#ifdef _MSC_VER
        #pragma warning(push)
        #pragma warning(disable: 4455)
#endif
        using std::literals::operator""sv;
#ifdef _MSC_VER
        #pragma warning(pop)
#endif

        struct pair {
            std::string_view key;
            std::string_view (*get)();
        };

        static constexpr pair blobs[] = {
            {"en"sv, [] { return en::view(); }},
            {"fr"sv, [] { return fr::view(); }},
            {"pl"sv, [] { return pl::view(); }},
        };

        for (auto const& [blob, get] : blobs) {
            if (blob == key) return get();
        }

        return std::nullopt;
    };
} // namespace lngs::languages
// clang-format on
