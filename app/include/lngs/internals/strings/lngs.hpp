// THIS FILE IS AUTOGENERATED
#pragma once

#include <lngs/lngs.hpp>

namespace lngs::app {
    enum class lng {
        SEVERITY_NOTE = 1001, // note (Name of the severity label for notes.)
        SEVERITY_WARNING = 1002, // warning (Name of the severity label for warnings.)
        SEVERITY_ERROR = 1003, // error (Name of the severity label for errors.)
        SEVERITY_FATAL = 1004, // fatal (Name of the severity label for fatals.)
        ERR_FILE_MISSING = 1005, // could not open `{0}' (Needed file was not found; filename is going to be shown as argument {0}.)
        ERR_FILE_NOT_FOUND = 1006, // could not open the file (Needed file was not found; filename is going to be shown as source of message.)
        ERR_NOT_STRINGS_FILE = 1007, // `{0}' is not strings file (Presented as additional message, if input file was not parsed properly.)
        ERR_NO_NEW_STRINGS = 1008, // no new strings (Shown by lngs freeze.)
        ERR_ATTR_EMPTY = 1009, // attribute `{0}' should not be empty (Used for attributes with no value. The argument represents the name of the attribute.)
        ERR_ATTR_MISSING = 1010, // attribute `{0}' is missing (Optional attribute is not present. The argument represents the name of the attribute.)
        ERR_REQ_ATTR_MISSING = 1011, // required attribute `{0}' is missing (A required attribute is not present. The argument represents the name of the attribute.)
        ERR_ID_MISSING_HINT = 1012, // before finalizing a value, use `id(-1)' (Hint for IDL authors, when an id attribute is missing.)
        ERR_EXPECTED = 1013, // expected {0}, got {1} (Information about bad syntax in the strings file. The arguments represent the expected and actual token, respectively.)
        ERR_EXPECTED_GOT_UNRECOGNIZED = 1014, // unrecognized text (Used as second argument for ERR_EXPECTED, as in "..., got unrecognized text")
        ERR_EXPECTED_STRING = 1016, // string (Used as first argument for ERR_EXPECTED, as in "expected string")
        ERR_EXPECTED_NUMBER = 1017, // number (Used as first argument for ERR_EXPECTED, as in "expected number")
        ERR_EXPECTED_ID = 1018, // identifier (Used as first argument for ERR_EXPECTED, as in "expected identifier")
        ERR_EXPECTED_GOT_EOF = 1019, // EOF (Used as second argument for ERR_EXPECTED, as in "..., got EOF")
        ERR_EXPECTED_GOT_STRING = 1020, // string (Used as second argument for ERR_EXPECTED, as in "..., got string")
        ERR_EXPECTED_GOT_NUMBER = 1021, // number (Used as second argument for ERR_EXPECTED, as in "..., got number")
        ERR_EXPECTED_GOT_ID = 1022, // identifier (Used as second argument for ERR_EXPECTED, as in "..., got identifier")
        ERR_MSGS_TRANSLATION_MISSING = 1023, // message file does not contain translation for "{0}" (Warning for a missing string. The argument will be replaced by identifier with missing translation.)
        ERR_MSGS_ATTR_LANG_MISSING = 1024, // message file does not contain Language attribute (The gettext MO file has no attribute for language-REGION pair. The word "Language" is not to be translated.)
        ERR_UNANMED_LOCALE = 1025, // locale {0} has no name (Message for missing name for a locale with no name for the culture in file with locale/name pairs.)
        ERR_LOCALE_MISSING = 1026, // no {0} locale on the list (Message for missing locale in file with locale/culture name pairs.)
        ERR_GETTEXT_FORMAT = 1027, // gettext file format error (The MO file has unexpected contents)
        ERR_GETTEXT_BLOCKS_OVERLAP = 1028, // two or more blocks occupy the same space (Detail of what was wrong with the contents)
        ERR_GETTEXT_STRING_OUTSIDE = 1029, // string not contained inside the block (Detail of what was wrong with the contents)
        ERR_GETTEXT_FILE_TRUNCATED = 1030, // file truncated; data missing (Detail of what was wrong with the contents)
        ERR_GETTEXT_NOT_ASCIIZ = 1031, // strings must end with a zero (Detail of what was wrong with the contents)
    }; // enum class lng

    struct Resource {
        static const char* data();
        static std::size_t size();
    };

    using Strings = lngs::SingularStrings<lng, lngs::storage::FileWithBuiltin<Resource>>;
}; // namespace lngs
