/*
 * Copyright (C) 2015 midnightBITS
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <lngs/commands.hpp>
#include <lngs/streams.hpp>
#include <lngs/strings.hpp>

namespace lngs::enums {
	int write(outstream& out, const idl_strings& defs, bool with_resource)
	{
		out.printf(R"(// THIS FILE IS AUTOGENERATED
#pragma once

#include <locale/locale.hpp>

)");

		const auto colon_pos = defs.project.rfind(':');
		const auto has_subnamespace = (colon_pos != std::string::npos) &&
			(colon_pos > 1) && (defs.project[colon_pos - 1] == ':');

		if (has_subnamespace) {
			std::string_view view{ defs.project };
			auto parent = view.substr(0, colon_pos - 2);
			auto curr = view.substr(colon_pos + 1);
			out.printf("namespace %.*s { inline namespace %.*s { } };\n\n",
				(int)parent.length(), parent.data(),
				(int)curr.length(), curr.data());
		}

		out.printf("%snamespace %s {\n", (has_subnamespace ? "" : "inline "), defs.project.c_str());
		bool has_singular = false;
		bool has_plural = false;

		bool first = true;
		for (auto& str : defs.strings) {
			if (!str.plural.empty()) {
				has_plural = true;
				continue;
			}

			has_singular = true;

			if (first) {
				out.printf("    enum class lng {\n");
				first = false;
			}

			auto message = straighten(str.value);
			auto help = straighten(str.help);

			out.printf("        %s = %d, // %s", str.key.c_str(), str.id, message.c_str());
			if (!help.empty())
				out.printf(" (%s)", help.c_str());
			out.printf("\n");
		}
		if (!first) {
			out.printf("    }; // enum class lng\n\n");
			first = true;
		}

		for (auto& str : defs.strings) {
			if (str.plural.empty())
				continue;

 			if (first) {
				out.printf("    enum class lngs {\n");
				first = false;
			}

			auto message = straighten(str.value);
			auto plural = straighten(str.plural);
			auto help = straighten(str.help);

			out.printf("        %s = %d, // %s", str.key.c_str(), str.id, message.c_str());
			if (!plural.empty())
				out.printf(" | %s", plural.c_str());
			if (!help.empty())
				out.printf(" (%s)", help.c_str());
			out.printf("\n");
		}
		if (!first)
			out.printf("    }; // enum class lngs\n\n");

		if (!has_singular && !has_plural) {
			out.printf(R"(    enum class faulty {
        UNDEFINED = 0 // File did not define any string
    }; // enum class faulty

)");
		}

		const char* storage = "";

		if (with_resource) {
			out.printf(R"(    struct Resource {
        static const char* data();
        static std::size_t size();
    };

)");
			storage = ", locale::storage::FileWithBuiltin<Resource>";
		}

		const char* strings_class = has_singular ?
			(has_plural ? "StringsWithPlurals<lng, lngs" : "SingularStrings<lng"):
			(has_plural ? "PluralOnlyStrings<lngs" : "SingularStrings<faulty");
		out.printf(R"(    using Strings = locale::%s%s>;
}; // namespace %s
)", strings_class, storage, defs.project.c_str());

		return 0;
	}
}
