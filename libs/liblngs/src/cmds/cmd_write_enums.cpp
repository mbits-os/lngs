/*
 * Copyright (C) 2015 midnightBITS
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <locale/file.hpp>
#include <lngs/argparser.hpp>
#include <lngs/strings.hpp>

namespace enums {
	void write(FILE* out, const locale::Strings& defs, bool with_resource);
	int call(args::parser& parser)
	{
		fs::path inname, outname;
		bool verbose = false;
		bool with_keys = false;
		bool with_resource = false;

		parser.set<std::true_type>(verbose, "v", "verbose").help("show more info").opt();
		parser.set<std::true_type>(with_keys, "k", "keys").help("add API to allow retrieve numeric ids for a given key").opt();
		parser.set<std::true_type>(with_resource, "r", "resource").help("configures the Strings type to use `lngs res'.").opt();
		parser.arg(outname, "o", "out").meta("FILE").help("C++ header file to write; if - is used, result is written to standard output");
		parser.arg(inname, "i", "in").meta("FILE").help("LNGS message file to read");
		parser.parse();

		locale::Strings strings;
		if (!locale::read_strings(inname, strings, verbose))
			return -1;

		if (outname == "-") {
			write(stdout, strings, with_resource);
			return 0;
		}

		auto outf = fs::fopen(outname, "w");

		if (!outf) {
			fprintf(stderr, "could not open `%s'", outname.string().c_str());
			return -1;
		}

		if (verbose)
			printf("%s\n", outname.string().c_str());

		write(outf.handle(), strings, with_resource);
		return 0;
	}

	void write(FILE* out, const locale::Strings& defs, bool with_resource)
	{
		fprintf(out, R"(// THIS FILE IS AUTOGENERATED
#pragma once

#include <locale.hpp>

inline namespace %s {
)", defs.project.c_str());
		bool has_singular = false;
		bool has_plural = false;

		bool first = true;
		for (auto& str : defs.strings) {
			if (!str.plural.empty()) {
				has_plural = true;
				continue;
			}

			has_singular = true;

			if (first) {
				fprintf(out, "    enum class lng {\n");
				first = false;
			}

			auto message = str.value;
			for (auto& c : message)
				if (c == '\n') c = ' ';

			auto help = str.help;
			for (auto& c : help)
				if (c == '\n') c = ' ';

			fprintf(out, "        %s = %d, // %s", str.key.c_str(), str.id, message.c_str());
			if (!help.empty())
				fprintf(out, " (%s)", help.c_str());
			fprintf(out, "\n");
		}
		if (!first) {
			fprintf(out, "    }; // enum class lng\n\n");
			first = true;
		}

		for (auto& str : defs.strings) {
			if (str.plural.empty())
				continue;

 			if (first) {
				fprintf(out, "    enum class lngs {\n");
				first = false;
			}

			auto message = str.value;
			for (auto& c : message)
				if (c == '\n') c = ' ';

			auto plural = str.plural;
			for (auto& c : plural)
				if (c == '\n') c = ' ';

			auto help = str.help;
			for (auto& c : help)
				if (c == '\n') c = ' ';

			fprintf(out, "        %s = %d, // %s", str.key.c_str(), str.id, message.c_str());
			if (!plural.empty())
				fprintf(out, " | %s", plural.c_str());
			if (!help.empty())
				fprintf(out, " (%s)", help.c_str());
			fprintf(out, "\n");
		}
		if (!first)
			fprintf(out, "    }; // enum class lngs\n\n");

		if (!has_singular && !has_plural) {
			fprintf(out, R"(    enum class faulty {
        UNDEFINED = 0 // File did not define any string
    }; // enum class lng

)");
		}

		const char* storage = "";

		if (with_resource) {
			fprintf(out, R"(    struct Resource {
        static const char* data();
        static std::size_t size();
    };

)");
			storage = ", locale::storage::FileWithBuiltin<Resource>";
		}

		const char* strings_class = has_singular ?
			(has_plural ? "StringsWithPlurals<lng, lngs" : "SingularStrings<lng"):
			(has_plural ? "PluralOnlyStrings<lngs" : "SingularStrings<faulty");
		fprintf(out, R"(    using Strings = locale::%s%s>;
}; // inline namespace %s

)", strings_class, storage, defs.project.c_str());
	}
}
